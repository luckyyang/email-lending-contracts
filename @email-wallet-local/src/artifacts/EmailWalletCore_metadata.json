{
	"compiler": {
		"version": "0.8.22+commit.4fc1097e"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_relayerHandler",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_accountHandler",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_unclaimsHandler",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_extensionHandler",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_verifier",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_tokenRegistry",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_priceOracle",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_wethContract",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_maxFeePerGas",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_emailValidityDuration",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_unclaimedFundClaimGas",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_unclaimedStateClaimGas",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bool",
						"name": "success",
						"type": "bool"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "registeredUnclaimId",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "emailNullifier",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "bytes32",
						"name": "emailAddrPointer",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "bytes32",
						"name": "recipientEmailAddrCommit",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "recipientETHAddr",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "err",
						"type": "bytes"
					}
				],
				"name": "EmailOpHandled",
				"type": "event"
			},
			{
				"stateMutability": "payable",
				"type": "fallback"
			},
			{
				"inputs": [],
				"name": "accountHandler",
				"outputs": [
					{
						"internalType": "contract AccountHandler",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenAddr",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "depositTokenAsExtension",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"name": "emailNullifiers",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "emailValidityDuration",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "target",
						"type": "address"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "executeAsExtension",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "extensionHandler",
				"outputs": [
					{
						"internalType": "contract ExtensionHandler",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "bytes32",
								"name": "emailAddrPointer",
								"type": "bytes32"
							},
							{
								"internalType": "bool",
								"name": "hasEmailRecipient",
								"type": "bool"
							},
							{
								"internalType": "bytes32",
								"name": "recipientEmailAddrCommit",
								"type": "bytes32"
							},
							{
								"internalType": "uint256",
								"name": "numRecipientEmailAddrBytes",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "recipientETHAddr",
								"type": "address"
							},
							{
								"internalType": "string",
								"name": "command",
								"type": "string"
							},
							{
								"internalType": "bytes32",
								"name": "emailNullifier",
								"type": "bytes32"
							},
							{
								"internalType": "string",
								"name": "emailDomain",
								"type": "string"
							},
							{
								"internalType": "bytes32",
								"name": "dkimPublicKeyHash",
								"type": "bytes32"
							},
							{
								"internalType": "uint256",
								"name": "timestamp",
								"type": "uint256"
							},
							{
								"internalType": "string",
								"name": "maskedSubject",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "feeTokenName",
								"type": "string"
							},
							{
								"internalType": "uint256",
								"name": "feePerGas",
								"type": "uint256"
							},
							{
								"internalType": "bytes",
								"name": "executeCallData",
								"type": "bytes"
							},
							{
								"internalType": "string",
								"name": "extensionName",
								"type": "string"
							},
							{
								"internalType": "address",
								"name": "newWalletOwner",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "newDkimRegistry",
								"type": "address"
							},
							{
								"components": [
									{
										"internalType": "string",
										"name": "tokenName",
										"type": "string"
									},
									{
										"internalType": "uint256",
										"name": "amount",
										"type": "uint256"
									}
								],
								"internalType": "struct WalletParams",
								"name": "walletParams",
								"type": "tuple"
							},
							{
								"components": [
									{
										"internalType": "uint8",
										"name": "subjectTemplateIndex",
										"type": "uint8"
									},
									{
										"internalType": "bytes[]",
										"name": "subjectParams",
										"type": "bytes[]"
									}
								],
								"internalType": "struct ExtensionParams",
								"name": "extensionParams",
								"type": "tuple"
							},
							{
								"internalType": "bytes",
								"name": "emailProof",
								"type": "bytes"
							}
						],
						"internalType": "struct EmailOp",
						"name": "emailOp",
						"type": "tuple"
					}
				],
				"name": "handleEmailOp",
				"outputs": [
					{
						"internalType": "bool",
						"name": "success",
						"type": "bool"
					},
					{
						"internalType": "bytes",
						"name": "err",
						"type": "bytes"
					},
					{
						"internalType": "uint256",
						"name": "totalFeeInETH",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "registeredUnclaimId",
						"type": "uint256"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes[]",
						"name": "defaultExtensions",
						"type": "bytes[]"
					}
				],
				"name": "initialize",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "maxFeePerGas",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "priceOracle",
				"outputs": [
					{
						"internalType": "contract IPriceOracle",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "extensionAddr",
						"type": "address"
					},
					{
						"internalType": "bytes",
						"name": "state",
						"type": "bytes"
					}
				],
				"name": "registerUnclaimedStateAsExtension",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "relayerHandler",
				"outputs": [
					{
						"internalType": "contract RelayerHandler",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenAddr",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "requestTokenAsExtension",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "tokenRegistry",
				"outputs": [
					{
						"internalType": "contract TokenRegistry",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "unclaimedFundClaimGas",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "unclaimedStateClaimGas",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "unclaimsHandler",
				"outputs": [
					{
						"internalType": "contract UnclaimsHandler",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "bytes32",
								"name": "emailAddrPointer",
								"type": "bytes32"
							},
							{
								"internalType": "bool",
								"name": "hasEmailRecipient",
								"type": "bool"
							},
							{
								"internalType": "bytes32",
								"name": "recipientEmailAddrCommit",
								"type": "bytes32"
							},
							{
								"internalType": "uint256",
								"name": "numRecipientEmailAddrBytes",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "recipientETHAddr",
								"type": "address"
							},
							{
								"internalType": "string",
								"name": "command",
								"type": "string"
							},
							{
								"internalType": "bytes32",
								"name": "emailNullifier",
								"type": "bytes32"
							},
							{
								"internalType": "string",
								"name": "emailDomain",
								"type": "string"
							},
							{
								"internalType": "bytes32",
								"name": "dkimPublicKeyHash",
								"type": "bytes32"
							},
							{
								"internalType": "uint256",
								"name": "timestamp",
								"type": "uint256"
							},
							{
								"internalType": "string",
								"name": "maskedSubject",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "feeTokenName",
								"type": "string"
							},
							{
								"internalType": "uint256",
								"name": "feePerGas",
								"type": "uint256"
							},
							{
								"internalType": "bytes",
								"name": "executeCallData",
								"type": "bytes"
							},
							{
								"internalType": "string",
								"name": "extensionName",
								"type": "string"
							},
							{
								"internalType": "address",
								"name": "newWalletOwner",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "newDkimRegistry",
								"type": "address"
							},
							{
								"components": [
									{
										"internalType": "string",
										"name": "tokenName",
										"type": "string"
									},
									{
										"internalType": "uint256",
										"name": "amount",
										"type": "uint256"
									}
								],
								"internalType": "struct WalletParams",
								"name": "walletParams",
								"type": "tuple"
							},
							{
								"components": [
									{
										"internalType": "uint8",
										"name": "subjectTemplateIndex",
										"type": "uint8"
									},
									{
										"internalType": "bytes[]",
										"name": "subjectParams",
										"type": "bytes[]"
									}
								],
								"internalType": "struct ExtensionParams",
								"name": "extensionParams",
								"type": "tuple"
							},
							{
								"internalType": "bytes",
								"name": "emailProof",
								"type": "bytes"
							}
						],
						"internalType": "struct EmailOp",
						"name": "emailOp",
						"type": "tuple"
					}
				],
				"name": "validateEmailOp",
				"outputs": [],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "verifier",
				"outputs": [
					{
						"internalType": "contract IVerifier",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "wethContract",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"stateMutability": "payable",
				"type": "receive"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"constructor": {
					"params": {
						"_accountHandler": "Address of the account handler contract",
						"_emailValidityDuration": "Time period until which a email is valid for EmailOp based on the timestamp of the email signature",
						"_extensionHandler": "Address of the extension handler contract",
						"_maxFeePerGas": "Max fee per gas in wei that relayer can set in a UserOp",
						"_priceOracle": "Address of the price oracle contract",
						"_relayerHandler": "Address of the relayer handler contract",
						"_tokenRegistry": "Address of the token registry contract",
						"_unclaimedFundClaimGas": "Gas required to claim unclaimed funds",
						"_unclaimedStateClaimGas": "Gas required to claim unclaimed state",
						"_unclaimsHandler": "Address of the unclaims handler contract",
						"_verifier": "Address of the ZK proof verifier",
						"_wethContract": "Address of the WETH contract"
					}
				},
				"depositTokenAsExtension(address,uint256)": {
					"details": "Extension should add allowance to Core contract before calling this function",
					"params": {
						"amount": "Amount to be deposited",
						"tokenAddr": "Address of the ERC20 token to be deposited"
					}
				},
				"executeAsExtension(address,bytes)": {
					"details": "Do not use this method to transfer tokens. Use `requestTokenAsExtension()` instead",
					"params": {
						"data": "Calldata to be executed on the target contract",
						"target": "Address of the contract on which the call is to be executed"
					}
				},
				"handleEmailOp((bytes32,bool,bytes32,uint256,address,string,bytes32,string,bytes32,uint256,string,string,uint256,bytes,string,address,address,(string,uint256),(uint8,bytes[]),bytes))": {
					"details": "ETH for unclaimed fund/state registration should be send if the recipient is an email addressRelayer should make sure user has enough tokens to pay for the fee. This can be calculated as~ verificationGas(fixed) + executionGas(extension.maxGas if extension) + feeForReimbursement(50k) + msg.value",
					"params": {
						"emailOp": "EmailOp to be executed"
					},
					"returns": {
						"err": "Error message if execution failed (execution failures will not revert)",
						"success": "Whether the execution was successful",
						"totalFeeInETH": "Total fee in ETH that should be reimbursed to the relayer"
					}
				},
				"initialize(bytes[])": {
					"params": {
						"defaultExtensions": "List of default extensions to be set"
					}
				},
				"registerUnclaimedStateAsExtension(address,bytes)": {
					"params": {
						"extensionAddr": "Address of the extension contract to which the state is registered",
						"state": "State to be registered"
					}
				},
				"requestTokenAsExtension(address,uint256)": {
					"params": {
						"amount": "Amount requested",
						"tokenAddr": "Address of the ERC20 token requested"
					}
				},
				"validateEmailOp((bytes32,bool,bytes32,uint256,address,string,bytes32,string,bytes32,uint256,string,string,uint256,bytes,string,address,address,(string,uint256),(uint8,bytes[]),bytes))": {
					"params": {
						"emailOp": "EmailOp to be validated"
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"constructor": {
					"notice": "Constructor"
				},
				"depositTokenAsExtension(address,uint256)": {
					"notice": "For extension in context to deposit token to user's wallet during handleEmailOp"
				},
				"executeAsExtension(address,bytes)": {
					"notice": "For extension in context to execute on user's wallet during handleEmailOp"
				},
				"handleEmailOp((bytes32,bool,bytes32,uint256,address,string,bytes32,string,bytes32,uint256,string,string,uint256,bytes,string,address,address,(string,uint256),(uint8,bytes[]),bytes))": {
					"notice": "Handle an EmailOp - the main function relayer should call for each Email"
				},
				"initialize(bytes[])": {
					"notice": "Initialize contract with some defaults after deployment"
				},
				"registerUnclaimedStateAsExtension(address,bytes)": {
					"notice": "For extension in context to register Unclaimed State during handleEmailOp"
				},
				"requestTokenAsExtension(address,uint256)": {
					"notice": "For extension in context to request token from user's wallet during handleEmailOp"
				},
				"validateEmailOp((bytes32,bool,bytes32,uint256,address,string,bytes32,string,bytes32,uint256,string,string,uint256,bytes,string,address,address,(string,uint256),(uint8,bytes[]),bytes))": {
					"notice": "Validate an EmailOp, including proof verification"
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"packages/contracts/src/EmailWalletCore.sol": "EmailWalletCore"
		},
		"evmVersion": "shanghai",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
			"keccak256": "0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98",
			"license": "MIT",
			"urls": [
				"bzz-raw://99c8cb3cd19a44bbfb6612605affb7d8b06cee1f6aa9362a37a8672b4f7eeaf8",
				"dweb:/ipfs/QmasyxFDBUp7k5KFgfDWEzM8PYSKEq7GVznzMJ1VxVRF4B"
			]
		},
		"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
			"keccak256": "0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794",
			"license": "MIT",
			"urls": [
				"bzz-raw://f103ee2e4aecd37aac6ceefe670709cdd7613dee25fa2d4d9feaf7fc0aaa155e",
				"dweb:/ipfs/QmRiNZLoJk5k3HPMYGPGjZFd2ke1ZxjhJZkM45Ec9GH9hv"
			]
		},
		"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
			"keccak256": "0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422",
			"license": "MIT",
			"urls": [
				"bzz-raw://310136ad60820af4177a11a61d77a3686faf5fca4942b600e08fc940db38396b",
				"dweb:/ipfs/QmbCzMNSTL7Zi7M4UCSqBrkHtp4jjxUnGbkneCZKdR1qeq"
			]
		},
		"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
			"keccak256": "0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149",
			"license": "MIT",
			"urls": [
				"bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c",
				"dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a"
			]
		},
		"@openzeppelin/contracts-upgradeable/utils/Create2Upgradeable.sol": {
			"keccak256": "0x1a18b22e850a37d6620f436850b2941efdf4770bcffbb61c8a9522f6ab514bcd",
			"license": "MIT",
			"urls": [
				"bzz-raw://0434bca8a86bf4cb28c61591cb4a6c712e40fedde36fd1a578dc6aa97e6fc79f",
				"dweb:/ipfs/QmPVoDGegzJbpx9hMdD9JhE8hbLjnpCWCfUnBdqHB2wTVj"
			]
		},
		"@openzeppelin/contracts/access/Ownable.sol": {
			"keccak256": "0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218",
			"license": "MIT",
			"urls": [
				"bzz-raw://fc980984badf3984b6303b377711220e067722bbd6a135b24669ff5069ef9f32",
				"dweb:/ipfs/QmPHXMSXj99XjSVM21YsY6aNtLLjLVXDbyN76J5HQYvvrz"
			]
		},
		"@openzeppelin/contracts/interfaces/IERC1967.sol": {
			"keccak256": "0x3cbef5ebc24b415252e2f8c0c9254555d30d9f085603b4b80d9b5ed20ab87e90",
			"license": "MIT",
			"urls": [
				"bzz-raw://e8fa670c3bdce78e642cc6ae11c4cb38b133499cdce5e1990a9979d424703263",
				"dweb:/ipfs/QmVxeCUk4jL2pXQyhsoNJwyU874wRufS2WvGe8TgPKPqhE"
			]
		},
		"@openzeppelin/contracts/interfaces/draft-IERC1822.sol": {
			"keccak256": "0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff",
			"license": "MIT",
			"urls": [
				"bzz-raw://383fb7b8181016ac5ccf07bc9cdb7c1b5045ea36e2cc4df52bcbf20396fc7688",
				"dweb:/ipfs/QmYJ7Cg4WmE3rR8KGQxjUCXFfTH6TcwZ2Z1f6tPrq7jHFr"
			]
		},
		"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol": {
			"keccak256": "0xa2b22da3032e50b55f95ec1d13336102d675f341167aa76db571ef7f8bb7975d",
			"license": "MIT",
			"urls": [
				"bzz-raw://96b6d77a20bebd4eb06b801d3d020c7e82be13bd535cb0d0a6b7181c51dab5d5",
				"dweb:/ipfs/QmPUR9Cv9jNFdQX6PtBfaBW1ZCnKwiu65R2VD5kbdanDyn"
			]
		},
		"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
			"keccak256": "0x3b21ae06bf5957f73fa16754b0669c77b7abd8ba6c072d35c3281d446fdb86c2",
			"license": "MIT",
			"urls": [
				"bzz-raw://2db8e18505e86e02526847005d7287a33e397ed7fb9eaba3fd4a4a197add16e2",
				"dweb:/ipfs/QmW9BSuKTzHWHBNSHF4L8XfVuU1uJrP2vLg84YtBd8mL82"
			]
		},
		"@openzeppelin/contracts/proxy/Proxy.sol": {
			"keccak256": "0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27",
			"license": "MIT",
			"urls": [
				"bzz-raw://8831721b6f4cc26534d190f9f1631c3f59c9ff38efdd911f85e0882b8e360472",
				"dweb:/ipfs/QmQZnLErZNStirSQ13ZNWQgvEYUtGE5tXYwn4QUPaVUfPN"
			]
		},
		"@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
			"keccak256": "0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61",
			"license": "MIT",
			"urls": [
				"bzz-raw://ada1e030c0231db8d143b44ce92b4d1158eedb087880cad6d8cc7bd7ebe7b354",
				"dweb:/ipfs/QmWZ2NHZweRpz1U9GF6R1h65ri76dnX7fNxLBeM2t5N5Ce"
			]
		},
		"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol": {
			"keccak256": "0xc6619957bcc6641fe8984bfaf9ff11a9e4b97d8149c0495f608f9a2416d7c5cf",
			"license": "MIT",
			"urls": [
				"bzz-raw://543be67f7fa43b1b932637c1c7f12035f0f4b0f7ee2bd3c33841186f79c165c1",
				"dweb:/ipfs/QmSBPM2UVKbmJqWfD9i6hSiqbaE8TV4TSqfuiivziRRLKM"
			]
		},
		"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
			"keccak256": "0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1",
			"license": "MIT",
			"urls": [
				"bzz-raw://41319e7f621f2dc3733511332c4fd032f8e32ad2aa7fd6f665c19741d9941a34",
				"dweb:/ipfs/QmcYR3bd862GD1Bc7jwrU9bGxrhUu5na1oP964bDCu2id1"
			]
		},
		"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
			"keccak256": "0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b",
			"license": "MIT",
			"urls": [
				"bzz-raw://0e28648f994abf1d6bc345644a361cc0b7efa544f8bc0c8ec26011fed85a91ec",
				"dweb:/ipfs/QmVVE7AiRjKaQYYji7TkjmTeVzGpNmms5eoxqTCfvvpj6D"
			]
		},
		"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
			"keccak256": "0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c",
			"license": "MIT",
			"urls": [
				"bzz-raw://cac938788bc4be12101e59d45588b4e059579f4e61062e1cda8d6b06c0191b15",
				"dweb:/ipfs/QmV2JKCyjTVH3rkWNrfdJRhAT7tZ3usAN2XcnD4h53Mvih"
			]
		},
		"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305",
			"license": "MIT",
			"urls": [
				"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5",
				"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53"
			]
		},
		"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
			"keccak256": "0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca",
			"license": "MIT",
			"urls": [
				"bzz-raw://5a376d3dda2cb70536c0a45c208b29b34ac560c4cb4f513a42079f96ba47d2dd",
				"dweb:/ipfs/QmZQg6gn1sUpM8wHzwNvSnihumUCAhxD119MpXeKp8B9s8"
			]
		},
		"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
			"keccak256": "0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a",
			"license": "MIT",
			"urls": [
				"bzz-raw://bc5b5dc12fbc4002f282eaa7a5f06d8310ed62c1c77c5770f6283e058454c39a",
				"dweb:/ipfs/Qme9rE2wS3yBuyJq9GgbmzbsBQsW2M2sVFqYYLw7bosGrv"
			]
		},
		"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
			"keccak256": "0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1",
			"license": "MIT",
			"urls": [
				"bzz-raw://9d213d3befca47da33f6db0310826bcdb148299805c10d77175ecfe1d06a9a68",
				"dweb:/ipfs/QmRgCn6SP1hbBkExUADFuDo8xkT4UU47yjNF5FhCeRbQmS"
			]
		},
		"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
			"keccak256": "0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da",
			"license": "MIT",
			"urls": [
				"bzz-raw://6e75cf83beb757b8855791088546b8337e9d4684e169400c20d44a515353b708",
				"dweb:/ipfs/QmYvPafLfoquiDMEj7CKHtvbgHu7TJNPSVPSCjrtjV8HjV"
			]
		},
		"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol": {
			"keccak256": "0x1a5d61db2733202ba361e6d6741cd2e662380e22b80e987eacfc91973f2267dc",
			"license": "MIT",
			"urls": [
				"bzz-raw://04c0cd697050a6516b7779aa2343ad2d0e5217d8915ac2382681dfdf4e445be3",
				"dweb:/ipfs/QmPCBCZgm7pHBwwogE2F9NCN3UfTdLNhqc8UDEvw8kDzyA"
			]
		},
		"@openzeppelin/contracts/utils/Address.sol": {
			"keccak256": "0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa",
			"license": "MIT",
			"urls": [
				"bzz-raw://2455248c8ddd9cc6a7af76a13973cddf222072427e7b0e2a7d1aff345145e931",
				"dweb:/ipfs/QmfYjnjRbWqYpuxurqveE6HtzsY1Xx323J428AKQgtBJZm"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
			"license": "MIT",
			"urls": [
				"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
				"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
			]
		},
		"@openzeppelin/contracts/utils/StorageSlot.sol": {
			"keccak256": "0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899",
			"license": "MIT",
			"urls": [
				"bzz-raw://e26daf81e2252dc1fe1ce0e4b55c2eb7c6d1ee84ae6558d1a9554432ea1d32da",
				"dweb:/ipfs/Qmb1UANWiWq5pCKbmHSu772hd4nt374dVaghGmwSVNuk8Q"
			]
		},
		"@openzeppelin/contracts/utils/Strings.sol": {
			"keccak256": "0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0",
			"license": "MIT",
			"urls": [
				"bzz-raw://b81d9ff6559ea5c47fc573e17ece6d9ba5d6839e213e6ebc3b4c5c8fe4199d7f",
				"dweb:/ipfs/QmPCW1bFisUzJkyjroY3yipwfism9RRCigCcK1hbXtVM8n"
			]
		},
		"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
			"keccak256": "0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1",
			"license": "MIT",
			"urls": [
				"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f",
				"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy"
			]
		},
		"@openzeppelin/contracts/utils/math/Math.sol": {
			"keccak256": "0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3",
			"license": "MIT",
			"urls": [
				"bzz-raw://cc8841b3cd48ad125e2f46323c8bad3aa0e88e399ec62acb9e57efa7e7c8058c",
				"dweb:/ipfs/QmSqE4mXHA2BXW58deDbXE8MTcsL5JSKNDbm23sVQxRLPS"
			]
		},
		"@openzeppelin/contracts/utils/math/SignedMath.sol": {
			"keccak256": "0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc",
			"license": "MIT",
			"urls": [
				"bzz-raw://c50fcc459e49a9858b6d8ad5f911295cb7c9ab57567845a250bf0153f84a95c7",
				"dweb:/ipfs/QmcEW85JRzvDkQggxiBBLVAasXWdkhEysqypj9EaB6H2g6"
			]
		},
		"@zk-email/contracts/interfaces/IDKIMRegistry.sol": {
			"keccak256": "0x85ee536632227f79e208f364bb0fa8fdf6c046baa048e158d0817b8d1fce615d",
			"license": "MIT",
			"urls": [
				"bzz-raw://4a64d541d2d914ce7e6a13605fbdfb64abfa43dc9f7e2e1865948e2e0ed0f4b6",
				"dweb:/ipfs/Qmc1yJHdkXMdR2nbkFhgCruuYnA76zV6784qbiFaN7xU5V"
			]
		},
		"accountabstraction/contracts/samples/callback/TokenCallbackHandler.sol": {
			"keccak256": "0xfff3df5f5211d71158bb017ff791dc4fa85db53890f7bd72bac3a43d89e83752",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://8f91c2d9845513fc88bf73efecd4907d9895b6f9fbe1d6fca09c4d3ad2d787f3",
				"dweb:/ipfs/QmQAFiKpqjVjWrm538tVEYuZvML6iNxNkQAy4UzchJEcpB"
			]
		},
		"packages/contracts/src/EmailWalletCore.sol": {
			"keccak256": "0x430e46537cb492df6458c2b9e0421df9935e5b2d820ec307e3be497125b9954e",
			"license": "MIT",
			"urls": [
				"bzz-raw://073ad2bf6ce1d75daae75efed0b33e1449338d553e1fe66f344ec142bdce0a82",
				"dweb:/ipfs/QmVbm3C5wh38oyK2Bmr66unaxiqiVLzWhSD1DEUxr2Jvct"
			]
		},
		"packages/contracts/src/LibZip.sol": {
			"keccak256": "0xc8a95904ff0675c2f7e937a993372a59a6209674573460d50851be1e733dcdcc",
			"license": "MIT",
			"urls": [
				"bzz-raw://9e9db35f483f7a3ccec0fb75eb170eddfff6dcfb8b812a27829383176a24737f",
				"dweb:/ipfs/QmPiPWo3STai4g9XddjV8URUVHTv3aEJkFAgmkMw2Wek3v"
			]
		},
		"packages/contracts/src/Wallet.sol": {
			"keccak256": "0xbdaa97ae03e55b5e33a63734c5e66a8af0e84ab1e78a07de55048c4f015c5db3",
			"license": "MIT",
			"urls": [
				"bzz-raw://22e96e946be8255e700d87c5ce6bdc3d7c8d78b6a8bec924c80acc8cc5f43452",
				"dweb:/ipfs/QmYRtprjqwAQ3PaBUXHcbAF6tS5fQ5r1cY9cL8aB2pMYQ8"
			]
		},
		"packages/contracts/src/handlers/AccountHandler.sol": {
			"keccak256": "0x422bb7bd894d22ba8567d8c6be73daa30a8d7253c141b4350f8745d62a1bba8d",
			"license": "MIT",
			"urls": [
				"bzz-raw://2a04654fb8ae439807888ce21e865929a6500b520126d09e3c15b6914b8ca651",
				"dweb:/ipfs/QmVEZc19hhCjaMRHB3itxJExE3i1c8uyC42iTb1z9EWFqQ"
			]
		},
		"packages/contracts/src/handlers/ExtensionHandler.sol": {
			"keccak256": "0x45222fd8dcfceb4f1ad34447f5eccba3029c7c3ece1478343c59c3b13d2dd512",
			"license": "MIT",
			"urls": [
				"bzz-raw://0ddd93f9974e32b2fadf64df61b1e7ce8c9cd81f09e661d8281769829e69f702",
				"dweb:/ipfs/QmXmjgoyfFvmGciRYaVrkbjRgMAyAnU43X7KqsT8kUSCPr"
			]
		},
		"packages/contracts/src/handlers/RelayerHandler.sol": {
			"keccak256": "0xd9acac077475b50731934883795259e3db64c252fe63debad4536dbfd2f7366e",
			"license": "MIT",
			"urls": [
				"bzz-raw://2fcbd07b0898e770f0860f2a8c36127152bbe0c1afa782506da6cdba1eec5b08",
				"dweb:/ipfs/QmZoTHnnZ4CARhxaiYqcVkDzSpoqv1poiuXedUHAma1Cvt"
			]
		},
		"packages/contracts/src/handlers/UnclaimsHandler.sol": {
			"keccak256": "0x3ff0edfca5755a5959c6c3698e352e9ea7233322f756c2a2b7d8dbe40d626ca6",
			"license": "MIT",
			"urls": [
				"bzz-raw://3424aa58b9dd822a58956aba2091ee1ba1770763a552c1e8b756479ceff510e7",
				"dweb:/ipfs/QmNifSGue6VoKePmvtNx4BBk3Z1fKKoqaSKJ7FHGsTedQT"
			]
		},
		"packages/contracts/src/interfaces/Commands.sol": {
			"keccak256": "0x51c231cbf0add6f1be7c06183e22a5825f3a8f8d42704bfbec90e27de58fb529",
			"license": "MIT",
			"urls": [
				"bzz-raw://e69728eb260a8a91f0ba5da04d7f360ce28bc39fd3ec9b440a742c60c412de03",
				"dweb:/ipfs/QmQYzasGzc5uHhaENkPJCyBdE4LuN4KaZwn8aR9FKw2KWi"
			]
		},
		"packages/contracts/src/interfaces/Events.sol": {
			"keccak256": "0x7f69668b85b99cf36918bf3b955b621bbdc4c3317e9c8153e3be6191ab757af5",
			"license": "MIT",
			"urls": [
				"bzz-raw://a0c2914dc5b83beca0f35bc90f0d6b48c8a16a61705da3b3aba98a7fc6c63b9c",
				"dweb:/ipfs/QmYmJ3dnan9f5Z7Vub6tCV2R9Z1Qo2Lr1vt8F3vQvkX2KP"
			]
		},
		"packages/contracts/src/interfaces/Extension.sol": {
			"keccak256": "0xcc25fb43b3df67269a28d3b3101e5c9719a1198d18d43f3fdcdf25cb78ff945b",
			"license": "MIT",
			"urls": [
				"bzz-raw://7dc2db4488dae45d62419107daa9a323e762e1f81113d1af0165b9b359934059",
				"dweb:/ipfs/QmSbGkFPDyqBXgBzuPqNRduuiHYGq1Ud5VWk17TpWvuAst"
			]
		},
		"packages/contracts/src/interfaces/IPriceOracle.sol": {
			"keccak256": "0x048365ba56117bb08f6c73666f42dea4cd662f744e49e36a3d968d54d6133475",
			"license": "MIT",
			"urls": [
				"bzz-raw://32e0ac9a55b21de8f81c8e4ef62ad1723a242744e11a130d226eb4b592d77a83",
				"dweb:/ipfs/QmRyZ4CMnGWTrAPAvWo9vf1b9V13Z4jWRAmfWJAQQEfFhF"
			]
		},
		"packages/contracts/src/interfaces/IVerifier.sol": {
			"keccak256": "0xbe5543d4d5689d418f314406860c9c3c577e3e064c73d5875b6f68e54b12539e",
			"license": "MIT",
			"urls": [
				"bzz-raw://8696cb23f7fd8b3224413b858605754b52cef43f46f48612dbcb3644dc8462c7",
				"dweb:/ipfs/QmbDb5M2ft2kd3EfqtcNq2SrVVER37X4bGKsMaQX1GqSQv"
			]
		},
		"packages/contracts/src/interfaces/Types.sol": {
			"keccak256": "0x50de74eedcbbd193493096609b7cde01aab5b23d25a61931db92ec6ee5b90719",
			"license": "MIT",
			"urls": [
				"bzz-raw://bfd7033fa1fee901603afd2f0efc887a442b2cb9157e1037db2519cdd0f7fc69",
				"dweb:/ipfs/Qma32ioLTpvmsfdvzkwWANyoxDrf6FaynzmzzzG715Trr4"
			]
		},
		"packages/contracts/src/libraries/DecimalUtils.sol": {
			"keccak256": "0x0a0b086fdcb19b208eb41a2359b6389ec8371a1587dd73cce92086ba83fb05e9",
			"license": "MIT",
			"urls": [
				"bzz-raw://f0505d5e1e51ab5ca3a0141dbe472eecafd04ae6bf0a9235358f016121fad0ef",
				"dweb:/ipfs/QmcPABUaVRM7xSJ7WReuKBjY3zsjpvjoa5xvG8BVYu8oeA"
			]
		},
		"packages/contracts/src/libraries/SubjectUtils.sol": {
			"keccak256": "0x7e6db1071a85deeee07320ae272094d558d6b44ff9e2fe4edaabf9a95957dbc8",
			"license": "MIT",
			"urls": [
				"bzz-raw://2dff7b285554f15f741695c35e9987b09e6e60654606c4d8ad0f428c52b07348",
				"dweb:/ipfs/QmedvhxmHzyS9VJDLgbSBSETvw5cspHwhvbhBj6ATMooEb"
			]
		},
		"packages/contracts/src/utils/TokenRegistry.sol": {
			"keccak256": "0xaf5bfe37d311853aca7c65a900d4e824e1dbf0043a0016755eb1664e5ac209ef",
			"license": "MIT",
			"urls": [
				"bzz-raw://f22682283cc114a81f4e34dc846b79d4f8021a9644e7e7ca3e9bd16c982652b1",
				"dweb:/ipfs/QmPbS7sPgzGA3kA8wH28VfzR9PnG5VxAyReCPQrBqjq1nP"
			]
		}
	},
	"version": 1
}